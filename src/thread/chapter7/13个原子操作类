## 原子更新基本类型类
使用原子的方式更新基本类型,Atomic包提供了一下3个类
- AtomicBoolean
- AtomicInteger
- AtomicLong 

上面三种类提供的方法基本上一模一样

### AtomicInteger常用方法

- int addAndGet(int delta): 以原子方式将输入的数值与实例中的值(AtomicInteger里的value)
相加,并返回结果;
- boolean compareAndSet(int expect, int update): 如果输入的数值等于预期值，
则以原子方式将该值设置为输入的值。
- int getAndIncrement()：以原子方式将当前值加1，注意，这里返回的是自增前的值。
- void lazySet（int newValue）：最终会设置成newValue，使用lazySet设置值后，可能导致其他
线程在之后的一小段时间内还是可以读到旧的值。
- int getAndSet（int newValue）：以原子方式设置为newValue的值，并返回旧值。

## 原子更新数组
通过原子的方式更新数组里的某个元素,Atomic包提供了一下四个类
- AtomicIntegerArray：原子更新整型数组里的元素。
- AtomicLongArray：原子更新长整型数组里的元素。
- AtomicReferenceArray：原子更新引用类型数组里的元素。
- AtomicIntegerArray类主要是提供原子的方式更新数组里的整型

常用方法如下:

1. int addAndGet（int i，int delta）：以原子方式将输入值与数组中索引i的元素相加。
2. boolean compareAndSet（int i，int expect，int update）：如果当前值等于预期值，则以原子
方式将数组位置i的元素设置成update值。

需要注意的是，数组value通过构造方法传递进去，然后AtomicIntegerArray会将当前数组
复制一份，所以当AtomicIntegerArray对内部的数组元素进行修改时，不会影响传入的数组。

## 原子更新引用类型

原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子更新多个变量，就需
要使用这个原子更新引用类型提供的类。Atomic包提供了以下3个类。
- AtomicReference：原子更新引用类型。
- AtomicReferenceFieldUpdater：原子更新引用类型里的字段。
- AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子更新一个布尔类
型的标记位和引用类型。构造方法是AtomicMarkableReference（V initialRef，boolean
initialMark）。

## 原子更新字段类

如果需要原子的更新某个类的某个字段时,就需要使用原子更新字段类,Atomic包提供了三个类
进行原子字段的更新.

- AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器;
- AtomicLongFieldUpdater：原子更新长整型字段的更新器。
- AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起
来，可用于原子的更新数据和数据的版本号，可以解决使用CAS进行原子更新时可能出现的
ABA问题。
要想原子地更新字段类需要两步。第一步，因为原子更新字段类都是抽象类，每次使用的
时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。第
二步，更新类的字段（属性）必须使用public volatile修饰符。

以上3个类提供的方法几乎一样，所以本节仅以AstomicIntegerFieldUpdater为例进行讲解，